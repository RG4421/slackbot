// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2020-11-11 17:53:52.670005 -0600 CST m=+0.001081875
package slackbot

import "github.com/slack-go/slack/slackevents"

type AppHomeOpenedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.AppHomeOpenedEvent
}

type AppHomeOpenedEventCallback = func(bot *Bot, c AppHomeOpenedEventContainer)

func (b *Bot) RegisterAppHomeOpenedEvent(callback AppHomeOpenedEventCallback) {
	b.RegisterEvent("app_home_opened", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.AppHomeOpenedEvent)
		callback(b, AppHomeOpenedEventContainer{APIEvent: event, Event: *e})
	})
}

type AppMentionEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.AppMentionEvent
}

type AppMentionEventCallback = func(bot *Bot, c AppMentionEventContainer)

func (b *Bot) RegisterAppMentionEvent(callback AppMentionEventCallback) {
	b.RegisterEvent("app_mention", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.AppMentionEvent)
		callback(b, AppMentionEventContainer{APIEvent: event, Event: *e})
	})
}

type AppUninstalledEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.AppUninstalledEvent
}

type AppUninstalledEventCallback = func(bot *Bot, c AppUninstalledEventContainer)

func (b *Bot) RegisterAppUninstalledEvent(callback AppUninstalledEventCallback) {
	b.RegisterEvent("app_uninstalled", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.AppUninstalledEvent)
		callback(b, AppUninstalledEventContainer{APIEvent: event, Event: *e})
	})
}

type GridMigrationFinishedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.GridMigrationFinishedEvent
}

type GridMigrationFinishedEventCallback = func(bot *Bot, c GridMigrationFinishedEventContainer)

func (b *Bot) RegisterGridMigrationFinishedEvent(callback GridMigrationFinishedEventCallback) {
	b.RegisterEvent("grid_migration_finished", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.GridMigrationFinishedEvent)
		callback(b, GridMigrationFinishedEventContainer{APIEvent: event, Event: *e})
	})
}

type GridMigrationStartedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.GridMigrationStartedEvent
}

type GridMigrationStartedEventCallback = func(bot *Bot, c GridMigrationStartedEventContainer)

func (b *Bot) RegisterGridMigrationStartedEvent(callback GridMigrationStartedEventCallback) {
	b.RegisterEvent("grid_migration_started", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.GridMigrationStartedEvent)
		callback(b, GridMigrationStartedEventContainer{APIEvent: event, Event: *e})
	})
}

type LinkSharedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.LinkSharedEvent
}

type LinkSharedEventCallback = func(bot *Bot, c LinkSharedEventContainer)

func (b *Bot) RegisterLinkSharedEvent(callback LinkSharedEventCallback) {
	b.RegisterEvent("link_shared", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.LinkSharedEvent)
		callback(b, LinkSharedEventContainer{APIEvent: event, Event: *e})
	})
}

type MemberJoinedChannelEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.MemberJoinedChannelEvent
}

type MemberJoinedChannelEventCallback = func(bot *Bot, c MemberJoinedChannelEventContainer)

func (b *Bot) RegisterMemberJoinedChannelEvent(callback MemberJoinedChannelEventCallback) {
	b.RegisterEvent("member_joined_channel", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.MemberJoinedChannelEvent)
		callback(b, MemberJoinedChannelEventContainer{APIEvent: event, Event: *e})
	})
}

type MemberLeftChannelEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.MemberLeftChannelEvent
}

type MemberLeftChannelEventCallback = func(bot *Bot, c MemberLeftChannelEventContainer)

func (b *Bot) RegisterMemberLeftChannelEvent(callback MemberLeftChannelEventCallback) {
	b.RegisterEvent("member_left_channel", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.MemberLeftChannelEvent)
		callback(b, MemberLeftChannelEventContainer{APIEvent: event, Event: *e})
	})
}

type MessageEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.MessageEvent
}

type MessageEventCallback = func(bot *Bot, c MessageEventContainer)

func (b *Bot) RegisterMessageEvent(callback MessageEventCallback) {
	b.RegisterEvent("message", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.MessageEvent)
		callback(b, MessageEventContainer{APIEvent: event, Event: *e})
	})
}

type PinAddedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.PinAddedEvent
}

type PinAddedEventCallback = func(bot *Bot, c PinAddedEventContainer)

func (b *Bot) RegisterPinAddedEvent(callback PinAddedEventCallback) {
	b.RegisterEvent("pin_added", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.PinAddedEvent)
		callback(b, PinAddedEventContainer{APIEvent: event, Event: *e})
	})
}

type PinRemovedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.PinRemovedEvent
}

type PinRemovedEventCallback = func(bot *Bot, c PinRemovedEventContainer)

func (b *Bot) RegisterPinRemovedEvent(callback PinRemovedEventCallback) {
	b.RegisterEvent("pin_removed", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.PinRemovedEvent)
		callback(b, PinRemovedEventContainer{APIEvent: event, Event: *e})
	})
}

type ReactionAddedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.ReactionAddedEvent
}

type ReactionAddedEventCallback = func(bot *Bot, c ReactionAddedEventContainer)

func (b *Bot) RegisterReactionAddedEvent(callback ReactionAddedEventCallback) {
	b.RegisterEvent("reaction_added", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.ReactionAddedEvent)
		callback(b, ReactionAddedEventContainer{APIEvent: event, Event: *e})
	})
}

type ReactionRemovedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.ReactionRemovedEvent
}

type ReactionRemovedEventCallback = func(bot *Bot, c ReactionRemovedEventContainer)

func (b *Bot) RegisterReactionRemovedEvent(callback ReactionRemovedEventCallback) {
	b.RegisterEvent("reaction_removed", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.ReactionRemovedEvent)
		callback(b, ReactionRemovedEventContainer{APIEvent: event, Event: *e})
	})
}

type TokensRevokedEventContainer struct {
	APIEvent slackevents.EventsAPIEvent
	Event slackevents.TokensRevokedEvent
}

type TokensRevokedEventCallback = func(bot *Bot, c TokensRevokedEventContainer)

func (b *Bot) RegisterTokensRevokedEvent(callback TokensRevokedEventCallback) {
	b.RegisterEvent("tokens_revoked", func(bot *Bot, event slackevents.EventsAPIEvent) {
		e := event.InnerEvent.Data.(*slackevents.TokensRevokedEvent)
		callback(b, TokensRevokedEventContainer{APIEvent: event, Event: *e})
	})
}

